
// File: .dockerignore Depth: 0

01 **/.classpath
02 **/.dockerignore
03 **/.env
04 **/.git
05 **/.gitignore
06 **/.project
07 **/.settings
08 **/.toolstarget
09 **/.vs
10 **/.vscode
11 **/*.*proj.user
12 **/*.dbmdl
13 **/*.jfm
14 **/bin
15 **/charts
16 **/docker-compose*
17 **/compose*
18 **/Dockerfile*
19 **/node_modules
20 **/npm-debug.log
21 **/obj
22 **/secrets.dev.yaml
23 **/values.dev.yaml
24 LICENSE
25 README.md

// File: configs\default\nvim\.luarc.json Depth: 3

1 {
2     "diagnostics.globals": [
3         "vim"
4     ]
5 }

// File: configs\default\nvim\init.lua Depth: 3

01 vim.g.clipboard = {
02   name = 'tmux',
03   copy = {
04     ['+'] = 'tmux load-buffer -w -',
05     ['*'] = 'tmux load-buffer -w -',
06   },
07   paste = {
08     ['+'] = 'tmux save-buffer -',
09     ['*'] = 'tmux save-buffer -',
10   },
11   cache_enabled = 1,
12 }
13 
14 
15 if vim.fn.has("termguicolors") == 1 then
16   vim.opt.termguicolors = true
17 end
18 
19 
20 -- Bootstrap lazy.nvim
21 local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
22 if not (vim.uv or vim.loop).fs_stat(lazypath) then
23   local lazyrepo = "https://github.com/folke/lazy.nvim.git"
24   vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
25 end
26 vim.opt.rtp:prepend(lazypath)
27 
28 local opts = {}
29 
30 require("vim-options")
31 require("lazy").setup("plugins", opts)
32 
33 -- swap splits
34 vim.api.nvim_exec([[
35 function! SwapSplits()
36     wincmd L
37     wincmd K
38     wincmd J
39     wincmd H
40 endfunction
41 
42 command! SwapSplits call SwapSplits()
43 ]], false)
44 
45 
46 

// File: configs\default\nvim\lua\plugins\catppuccin.lua Depth: 5

1 return   { 
2    "catppuccin/nvim", name = "catppuccin", priority = 1000, 
3    config = function()
4       vim.cmd.colorscheme "catppuccin" 
5    end
6 }
7 
8 
9 

// File: configs\default\nvim\lua\plugins\lsp--config.lua Depth: 5

01 return {
02     {"williamboman/mason.nvim",
03     config = function() 
04         require("mason").setup()
05     end},
06     {
07         "williamboman/mason-lspconfig.nvim",
08         config = function() 
09             require("mason-lspconfig").setup({
10                 ensure_installed = {"lua_ls"}
11             })
12         end
13     },
14     {
15         "neovim/nvim-lspconfig",
16         config = function()
17             local lspconfig = require("lspconfig")
18             lspconfig.lua_ls.setup({})
19             vim.keymap.set('n', 'K', vim.lsp.buf.hover, {})
20             vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {})
21             vim.keymap.set({'n', 'v'}, '<leader>ca', vim.lsp.buf.code_action, {})
22         end
23     }
24 }

// File: configs\default\nvim\lua\plugins\lualine.lua Depth: 5

01 return {
02    "nvim-lualine/lualine.nvim",
03    config = function()
04       require('lualine').setup({
05          options = {
06             theme = 'dracula'
07          }
08       })
09    end
10 }

// File: configs\default\nvim\lua\plugins\neo-tree.lua Depth: 5

01 return {
02    "nvim-neo-tree/neo-tree.nvim",
03    branch = "v3.x",
04    dependencies = {
05       "nvim-lua/plenary.nvim",
06       "nvim-tree/nvim-web-devicons", -- not strictly required, but recommended
07       "MunifTanjim/nui.nvim",
08       --"3rd/image.nvim", -- Optional image support in preview window: See `# Preview Mode` for more information
09    },
10    config = function() 
11       vim.keymap.set('n', '<C-n>', ':Neotree filesystem reveal left<CR>')
12       local NERDTreeShowHidden = 1
13    end
14 }

// File: configs\default\nvim\lua\plugins\telescope.lua Depth: 5

01 return {
02 {
03         'nvim-telescope/telescope.nvim', tag = '0.1.8',
04         dependencies = { 'nvim-lua/plenary.nvim' },
05         config = function() 
06             local builtin = require('telescope.builtin')
07             vim.keymap.set('n', '<leader>ff', builtin.find_files, {})
08             vim.keymap.set('n', '<leader>fg', builtin.live_grep, {})
09             vim.keymap.set('n', '<leader>fb', builtin.buffers, {})
10             vim.keymap.set('n', '<leader>fh', builtin.help_tags, {})           
11         end    
12 },
13 {
14     "nvim-telescope/telescope-ui-select.nvim",
15     config = function()
16 require("telescope").setup {
17     extensions = {
18       ["ui-select"] = {
19         require("telescope.themes").get_dropdown {
20         }
21       }
22     }
23   }
24   -- To get ui-select loaded and working with telescope, you need to call
25   -- load_extension, somewhere after setup function:
26   require("telescope").load_extension("ui-select")
27 end
28 }
29 
30 }

// File: configs\default\nvim\lua\plugins\treesitter.lua Depth: 5

01 return {
02     "nvim-treesitter/nvim-treesitter", 
03     build = ":TSUpdate",
04     config = function()
05         local config = require("nvim-treesitter.configs")
06         config.setup({
07             ensure_installed = { "c", "lua", "vim", "vimdoc", "query", "elixir", "heex", "javascript", "html", "rust", "python","java"},
08             sync_install = false,
09             highlight = { enable = true },
10             indent = { enable = true }    
11         })
12         -- This binds the leader key followed by i in visual mode to automatically indent the selected code.
13         vim.api.nvim_set_keymap('v', '<leader>i', ':normal! =<CR>', { noremap = true, silent = true })
14     end
15 }

// File: configs\default\nvim\lua\plugins.lua Depth: 4

1 return {}

// File: configs\default\nvim\lua\vim-options.lua Depth: 4

1 vim.g.mapleader = " "
2 vim.cmd("set expandtab")
3 vim.cmd("set tabstop=2")
4 vim.cmd("set softtabstop=2")
5 vim.cmd("set shiftwidth=3")
6 -- Disable Ctrl-Z in normal and insert mode
7 vim.api.nvim_set_keymap('n', '<C-z>', '<Nop>', { noremap = true, silent = true })
8 vim.api.nvim_set_keymap('i', '<C-z>', '<Nop>', { noremap = true, silent = true })

// File: configs\default\tmux\tmux.conf Depth: 3

01 set-option -sg escape-time 10
02 set-option -g focus-events on
03 set-option -g set-clipboard on
04 
05 # Use tmux's own buffer for copy-pasting within tmux
06 bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "tmux save-buffer -"
07 
08 # On macOS: Paste from system clipboard
09 # bind-key C-v run "tmux set-buffer $(pbpaste); tmux paste-buffer"
10 
11 # On Windows: Paste from system clipboard
12 # bind-key C-v run "powershell.exe Get-Clipboard | tmux set-buffer -; tmux paste-buffer"
13 
14 unbind C-z
15 
16 # set the terminal-features to the value of the env-variable TERM
17 set-option -sa terminal-features ',xterm:RGB'
18 set-option -ga terminal-overrides ',xterm:Tc'"
19 set-option -sg escape-time 10
20 set-option -g focus-events on

// File: docker\Dockerfile Depth: 1

01 FROM ubuntu:latest
02 
03 # Install dependencies and set up Zscaler certificate
04 RUN apt-get update && \
05     apt-get install -y \
06     neovim \
07     tmux \
08     git \
09     sudo \
10     curl \
11     wget \
12     apt-transport-https \
13     ca-certificates && \
14     apt-get clean
15 
16 # Copy setup scripts to the image
17 COPY scripts/setup_zscaler.sh /mnt/dev-env-setup/scripts/setup_zscaler.sh
18 
19 # Set up Zscaler certificate during build if it exists
20 ARG CERT_PATH=/workspace/zscaler.crt
21 RUN if [ -f "$CERT_PATH" ]; then \
22         echo "ZScaler certificate found, copying to /usr/local/share/ca-certificates" && \
23         cp $CERT_PATH /usr/local/share/ca-certificates/zscaler.crt && \
24         chmod 644 /usr/local/share/ca-certificates/zscaler.crt && \
25         update-ca-certificates --fresh && \
26         echo "ZScaler certificate added successfully"; \
27     else \
28         echo "ZScaler certificate not found. Skipping CA store update."; \
29     fi
30 
31 # Add user and set up home directory
32 RUN useradd -ms /bin/bash devuser
33 
34 # Set up sudo for devuser
35 RUN usermod -aG sudo devuser
36 RUN echo "devuser ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
37 
38 # Remove the Zscaler certificate if it was added
39 RUN echo "Checking for ZScaler certificate to remove" && \
40     if [ -f /usr/local/share/ca-certificates/zscaler.crt ]; then \
41         echo "ZScaler certificate found, removing" && \
42         rm /usr/local/share/ca-certificates/zscaler.crt && \
43         update-ca-certificates --fresh && \
44         echo "ZScaler certificate removed successfully"; \
45     else \
46         echo "ZScaler certificate was not added, nothing to remove."; \
47     fi
48 
49 # Switch to devuser
50 USER devuser
51 WORKDIR /home/devuser
52 
53 # Ensure the postCreateScript is executable and run it
54 ENTRYPOINT ["/bin/bash", "-c",                                       \
55             "chmod +x /mnt/dev-env-setup/scripts/postCreateScript.sh \
56             && /mnt/dev-env-setup/scripts/postCreateScript.sh"]

// File: docker-compose.debug.yml Depth: 0

01 version: '3.8'
02 
03 services:
04   dev-env:
05     build:
06       context: .
07       dockerfile: docker/Dockerfile
08     volumes:
09       - ${DEV_SETUP_PATH}:/mnt/dev-env-setup
10       - ${PROJECT_PATH}:/mnt/project
11     environment:
12       - USER=devuser
13     entrypoint: ["/bin/bash", "/mnt/dev-env-setup/docker/postCreateScript.sh"]
14     tty: true
15     command: ["tail", "-f", "/dev/null"]

// File: docker-compose.yml Depth: 0

01 version: '3.8'
02 
03 services:
04   dev-env:
05     container_name: ${CONTAINER_NAME}
06     image: ${IMAGE_NAME}
07     build:
08       context: .
09       dockerfile: docker/Dockerfile
10     volumes:
11       - ${DEV_SETUP_PATH}:/mnt/dev-env-setup
12       - ${PROJECT_PATH}:/mnt/project
13     environment:
14       - USER=devuser
15     entrypoint: ["/bin/bash", "/mnt/dev-env-setup/scripts/postCreateScript.sh"]
16     tty: true
17     networks:
18       - dev-network
19 
20 networks:
21   dev-network:
22     driver: bridge

// File: scripts\.env Depth: 1

1 DEV_SETUP_PATH=./ 
2 CONTAINER_NAME=nvim-ocr_dev_data 
3 IMAGE_NAME=nvim-ocr_dev_data 
4 PROJECT_PATH=../ocr_dev_data 

// File: scripts\configure_tools.sh Depth: 1

01 #!/bin/bash
02 
03 source /mnt/dev-env-setup/scripts/helper/log_helper.sh && log_script_name
04 
05 # Disable mouse reporting at the start
06 echo -e "\e[?1000l"
07 
08 source ./tools/copy_config_dir.sh
09 source ./tools/copy_config_file.sh
10 
11 # Check for suppress warnings option
12 while getopts ":s" opt; do
13   case ${opt} in
14     ( s ) 
15       SUPPRESS_WARNINGS=true
16       ;;
17     ( \? ) 
18       echo "Invalid option: -$OPTARG" 1>&2
19       exit 1
20       ;;
21   esac
22 done
23 shift $((OPTIND -1))
24 
25 # Check if a configuration name is provided
26 if [ -z "$1" ]; then
27     echo "Usage: $0 <config-name>"
28     exit 1
29 fi
30 
31 CONFIG_NAME=$1
32 BASE_PATH="/mnt/dev-env-setup/configs/$CONFIG_NAME"
33 USER_HOME="/home/devuser"
34 
35 # Check if the configuration directory exists
36 if [ ! -d "$BASE_PATH" ]; then
37     echo "Error: Configuration '$CONFIG_NAME' does not exist at $BASE_PATH"
38     exit 1
39 else 
40     echo "Configuration '$CONFIG_NAME' found in folder $BASE_PATH."
41 fi
42 
43 # Iterate over each tool in the configuration directory
44 for tool in $(ls $BASE_PATH); do
45     TOOL_SCRIPT="/mnt/dev-env-setup/scripts/tools/configure_${tool}.sh"
46     if [ -f "$TOOL_SCRIPT" ]; then
47         echo "Configuring $TOOL_SCRIPT path $BASE_PATH/$tool"
48         source "$TOOL_SCRIPT" "$BASE_PATH/$tool"
49     else
50         echo "No configuration script found for tool '$tool'. Skipping."
51     fi
52 done
53 
54 # Disable mouse reporting before exiting
55 echo -e "\e[?1000l"

// File: scripts\helper\log_helper.sh Depth: 2

01 #!/bin/bash
02 
03 log_script_name() {
04     local script_name=$(basename "$0")
05     local star_line=$(printf '%*s' "${#script_name}" | tr ' ' '*')
06 
07     echo "**""${star_line}""**"
08     echo "* ""${script_name}"" *"
09     echo "**""${star_line}""**"
10 }

// File: scripts\postCreateScript.sh Depth: 1

01 #!/bin/bash
02 
03 # Log the script name
04 source /mnt/dev-env-setup/scripts/helper/log_helper.sh && log_script_name
05 
06 # Setup ZScaler certificate if available
07 source /mnt/dev-env-setup/scripts/setup_zscaler.sh
08 
09 # Execute additional setup scripts
10 echo "Executing setup_ssh.sh"
11 source /mnt/dev-env-setup/scripts/setup_ssh.sh || { echo "Failed to execute setup_ssh.sh"; exit 1; }
12 
13 # Perform tool setups
14 echo "Executing configure_tools.sh with -s default"
15 /mnt/dev-env-setup/scripts/configure_tools.sh -s default || { echo "Failed to execute configure_tools.sh"; exit 1; }
16 
17 # Create a symbolic link for the scripts directory
18 ln -s /mnt/dev-env-setup/scripts ~/scripts || { echo "Failed to create symbolic link"; exit 1; }

// File: scripts\rebuild_dev_env.bat Depth: 1

01 @echo off
02 setlocal
03 
04 :: Check if the repository name is provided
05 if "%1"=="" (
06   echo Usage: %0 ^<repository_name^>
07   exit /b 1
08 )
09 
10 :: Set the project path, container name, and image name based on the repository name
11 set REPO_NAME=%1
12 set PROJECT_PATH=../%REPO_NAME%
13 set CONTAINER_NAME=nvim-%REPO_NAME%
14 set IMAGE_NAME=nvim-%REPO_NAME%
15 
16 :: Create or update the .env file
17 echo DEV_SETUP_PATH=./ > .env
18 echo CONTAINER_NAME=%CONTAINER_NAME% >> .env
19 echo IMAGE_NAME=%IMAGE_NAME% >> .env
20 echo PROJECT_PATH=%PROJECT_PATH% >> .env
21 
22 :: clear existing image
23 docker-compose -p %CONTAINER_NAME% down --volumes --remove-orphans
24 docker rmi %IMAGE_NAME%
25 
26 :: rebuild container
27 docker-compose build --no-cache
28 
29 endlocal

// File: scripts\run_dev_env.bat Depth: 1

01 @echo off
02 setlocal enabledelayedexpansion
03 
04 :: Check if the repository name is provided
05 if "%~1"=="" (
06   echo Usage: %0 ^<repository_name^>
07   exit /b 1
08 )
09 
10 :: Convert repository name to lowercase
11 set "REPO_NAME=%~1"
12 set "REPO_NAME_LOWER="
13 for /L %%I in (0,1,255) do (
14     set "char=!REPO_NAME:~%%I,1!"
15     if not "!char!"=="" (
16         for %%C in ("A=a" "B=b" "C=c" "D=d" "E=e" "F=f" "G=g" "H=h" "I=i" "J=j" "K=k" "L=l" "M=m" "N=n" "O=o" "P=p" "Q=q" "R=r" "S=s" "T=t" "U=u" "V=v" "W=w" "X=x" "Y=y" "Z=z") do (
17             set "char=!char:%%~C!"
18         )
19         set "REPO_NAME_LOWER=!REPO_NAME_LOWER!!char!"
20     )
21 )
22 echo !REPO_NAME_LOWER!
23 
24 :: Use the lowercase repository name for the rest of the script
25 :: We assume we only fire up one nvim container per script, otherwise
26 :: we would hava to augement the CONTAINER_NAME with  %RANDOM%
27 set "PROJECT_PATH=../!REPO_NAME_LOWER!"
28 set "CONTAINER_NAME=nvim-!REPO_NAME_LOWER!"
29 set "IMAGE_NAME=nvim-!REPO_NAME_LOWER!"
30 set "DEV_SETUP_PATH=./"
31 set "PROJECT_NAME=nvim-container-!REPO_NAME_LOWER!"
32 
33 :: Navigate to the parent directory to create the .env file
34 cd ..
35 
36 :: Create or update the .env file
37 echo DEV_SETUP_PATH=%DEV_SETUP_PATH% > .env
38 echo CONTAINER_NAME=%CONTAINER_NAME% >> .env
39 echo IMAGE_NAME=%IMAGE_NAME% >> .env
40 echo PROJECT_PATH=%PROJECT_PATH% >> .env
41 echo PROJECT_NAME=%PROJECT_NAME% >> .env
42 
43 :: Navigate back to the scripts directory
44 cd scripts
45 
46 :: Rebuild the Docker image to ensure changes are applied
47 docker-compose -p %PROJECT_NAME% -f ../docker-compose.yml build --no-cache
48 
49 :: Run docker-compose with the environment variables
50 docker-compose -p %PROJECT_NAME% -f ../docker-compose.yml up -d
51 
52 :: Display the status of the Docker Compose services
53 docker-compose -p %PROJECT_NAME% -f ../docker-compose.yml ps
54 
55 endlocal

// File: scripts\setup_ssh.sh Depth: 1

01 #!/bin/bash
02 
03 # Create .ssh directory if it doesn't exist
04 mkdir -p /home/devuser/.ssh
05 chmod 700 /home/devuser/.ssh
06 
07 # Start the SSH agent
08 eval "$(ssh-agent -s)"
09 
10 # Fix permissions of the private key files if they exist
11 if ls /home/devuser/.ssh/*_rsa 1> /dev/null 2>&1; then
12     chmod 600 /home/devuser/.ssh/*_rsa
13 else
14     echo "No SSH private keys found in /home/devuser/.ssh"
15 fi
16 
17 # Fix permissions of the .ssh/config file if it exists
18 if [ -f /home/devuser/.ssh/config ]; then
19     chmod 600 /home/devuser/.ssh/config
20 fi
21 
22 # Add all SSH keys to the agent if they exist
23 if ls /home/devuser/.ssh/*_rsa 1> /dev/null 2>&1; then
24     for key in /home/devuser/.ssh/*_rsa; do
25         ssh-add $key
26     done
27 else
28     echo "No SSH private keys found to add to the agent."
29 fi
30 
31 # Ensure known_hosts file exists
32 touch /home/devuser/.ssh/known_hosts
33 chown devuser:devuser /home/devuser/.ssh/known_hosts
34 chmod 644 /home/devuser/.ssh/known_hosts
35 
36 # Remove the offending key for GitHub from known_hosts if it exists
37 ssh-keygen -f "/home/devuser/.ssh/known_hosts" -R "github.com" || true
38 
39 # Add GitHub's new RSA key to known_hosts
40 ssh-keyscan -H github.com >> /home/devuser/.ssh/known_hosts
41 
42 # List all identities added to the SSH agent
43 echo "SSH Identities:"
44 ssh-add -l
45 
46 # Print the contents of the known_hosts file for debugging
47 echo "Known Hosts:"
48 cat /home/devuser/.ssh/known_hosts
49 
50 # Test the SSH connection to GitHub (optional, can be removed if not needed)
51 ssh -T git@github.com || true  # Add || true to avoid script failure

// File: scripts\setup_zscaler.sh Depth: 1

01 #!/bin/bash
02 
03 CERT_PATH="/mnt/dev-env-setup/zscaler.crt"
04 
05 if [ -f "$CERT_PATH" ]; then
06     echo "ZScaler certificate found, copying to /usr/local/share/ca-certificates"
07     sudo cp $CERT_PATH /usr/local/share/ca-certificates/zscaler.crt
08     sudo chmod 644 /usr/local/share/ca-certificates/zscaler.crt
09     sudo update-ca-certificates --fresh
10     echo "ZScaler certificate added successfully"
11 else
12     echo "ZScaler certificate not found. Skipping CA store update."
13 fi

// File: scripts\stop_all_dev_envs.bat Depth: 1

01 @echo off
02 setlocal enabledelayedexpansion
03 
04 echo Stopping all nvim-container related services...
05 
06 :: Stop and remove all nvim-container related services
07 for /f "tokens=*" %%i in ('docker ps -a --filter "name=nvim-" --format "{{.Names}}"') do (
08     docker-compose -f ../docker-compose.yml -p %%i down --volumes --remove-orphans
09 )
10 
11 echo Removing all nvim-container related images...
12 
13 :: Remove all nvim-container images
14 for /f "tokens=*" %%i in ('docker images --filter "reference=nvim-*" --format "{{.Repository}}:{{.Tag}}"') do (
15     docker rmi %%i
16 )
17 
18 echo All nvim-container related services and images have been stopped and removed.
19 
20 endlocal

// File: scripts\stop_dev_env.bat Depth: 1

01 @echo off
02 setlocal enabledelayedexpansion
03 
04 :: Check if the repository name is provided
05 if "%~1"=="" (
06   echo Usage: %0 ^<repository_name^>
07   exit /b 1
08 )
09 
10 :: Convert repository name to lowercase
11 set "REPO_NAME=%~1"
12 set "REPO_NAME_LOWER="
13 for /L %%I in (0,1,255) do (
14     set "char=!REPO_NAME:~%%I,1!"
15     if not "!char!"=="" (
16         for %%C in ("A=a" "B=b" "C=c" "D=d" "E=e" "F=f" "G=g" "H=h" "I=i" "J=j" "K=k" "L=l" "M=m" "N=n" "O=o" "P=p" "Q=q" "R=r" "S=s" "T=t" "U=u" "V=v" "W=w" "X=x" "Y=y" "Z=z") do (
17             set "char=!char:%%~C!"
18         )
19         set "REPO_NAME_LOWER=!REPO_NAME_LOWER!!char!"
20     )
21 )
22 echo !REPO_NAME_LOWER!
23 
24 :: Use the lowercase repository name for the rest of the script
25 set "CONTAINER_NAME=nvim-!REPO_NAME_LOWER!-%RANDOM%"
26 set "IMAGE_NAME=nvim-!REPO_NAME_LOWER!"
27 set "PROJECT_NAME=nvim-container-!REPO_NAME_LOWER!"
28 
29 :: Navigate to the parent directory
30 cd ..
31 
32 :: Stop and remove only the nvim-container related services
33 docker-compose -p %PROJECT_NAME% -f docker-compose.yml down --volumes --remove-orphans
34 
35 :: Remove the existing image
36 docker rmi %IMAGE_NAME%
37 
38 endlocal

// File: scripts\tools\configure_nvim.sh Depth: 2

01 #!/bin/bash
02 
03 SOURCE_PATH=$1
04 USER_HOME="/home/devuser"
05 DEST_PATH="$USER_HOME/.config/nvim"
06 
07 echo "configure nvim"
08 echo $SOURCE_PATH
09 echo $USER_HOME
10 echo $DEST_PATH
11 
12 if [ "$SUPPRESS_WARNINGS" = true ]; then 
13     echo "suppress warnings=true"
14 else
15     echo "suppress warnings=false"
16 fi
17 
18 # Check if the source directory exists
19 
20 copy_config_dir "Neovim" "$SOURCE_PATH" "$DEST_PATH"
21 
22 
23 

// File: scripts\tools\configure_tmux.sh Depth: 2

01 #!/bin/bash
02 
03 USER_HOME="/home/devuser"
04 SOURCE_FILE="$1/tmux.conf"
05 DEST_FILE="$USER_HOME/.tmux.conf"
06 
07 echo "tmux config"
08 echo $USER_HOME
09 echo $SOURCE_FILE
10 echo $DEST_FILE
11 
12 if [ "$SUPPRESS_WARNINGS" = true ]; then 
13     echo "suppress warnings=true"
14 else
15     echo "suppress warnings=false"
16 fi
17 
18 
19 copy_config_file "Tmux" "$SOURCE_FILE" "$DEST_FILE"
20    

// File: scripts\tools\copy_config_dir.sh Depth: 2

01 copy_config_dir() {
02     local tool=$1
03     local source_dir=$2
04     local dest_dir=$3
05 
06     # Check if source directory exists
07     if [ ! -d "$source_dir" ]; then
08         echo "Error: Source directory '$source_dir' does not exist."
09         exit 0
10     fi
11 
12     # If the destination directory exists, ask for confirmation if SUPPRESS_WARNINGS is not set
13     if [ -d "$dest_dir" ]; then
14         if [ "$SUPPRESS_WARNINGS" = false ]; then
15             echo "Warning: This will overwrite your existing $tool configuration in $dest_dir. Are you sure? (y/n)"
16             read -p ">" choice
17             case "$choice" in 
18                 ( y|Y ) ;;
19                 ( n|N ) 
20                     echo "Operation cancelled."
21                     exit 0
22                     ;;
23                 ( * ) 
24                     echo "Invalid input. Operation cancelled."
25                     exit 1
26                     ;;
27             esac
28         fi
29 
30         # Remove the existing destination directory
31         echo "Removing existing configuration in $dest_dir"
32         rm -rf "$dest_dir"
33     fi
34 
35     # Copy the source directory to the destination
36     echo "Copying configuration for $tool from $source_dir to $dest_dir"
37     cp -r "$source_dir" "$dest_dir"
38     if [ $? -ne 0 ]; then
39         echo "Error: Failed to copy '$source_dir' to '$dest_dir'."
40         exit 1
41     fi
42 
43     echo "$tool configuration copied to $dest_dir successfully."
44 }
45 
46 # Example usage
47 # copy_config_dir "Neovim" "/path/to/source/nvim" "/path/to/destination/nvim"

// File: scripts\tools\copy_config_file.sh Depth: 2

01 # Example usage
02 # copy_config_file "Neovim" "/path/to/source/init.vim" "/path/to/destination/init.vim"
03 
04 copy_config_file() {
05     local tool=$1
06     local source_file=$2
07     local dest_file=$3
08 
09     # Check if source file exists
10     if [ ! -f "$source_file" ]; then
11         echo "Error: Source file '$source_file' does not exist."
12         exit 0
13     fi
14 
15     # Check if destination is a file (not a directory)
16     if [ -d "$dest_file" ]; then
17         echo "Error: Destination '$dest_file' is a directory, not a file."
18         exit 1
19     fi
20 
21     # If the destination file exists, ask for confirmation if SUPPRESS_WARNINGS is not set
22     if [ -f "$dest_file" ]; then
23         if [ "$SUPPRESS_WARNINGS" = false ]; then
24             echo "Warning: This will overwrite your existing $tool configuration in $dest_file. Are you sure? (y/n)"
25             read -p ">" choice
26             case "$choice" in 
27                 ( y|Y ) ;;
28                 ( n|N ) 
29                     echo "Operation cancelled."
30                     exit 0
31                     ;;
32                 ( * ) 
33                     echo "Invalid input. Operation cancelled."
34                     exit 1
35                     ;;
36             esac
37         fi
38     fi
39 
40     # Copy the source file to the destination
41     cp "$source_file" "$dest_file"
42     if [ $? -ne 0 ]; then
43         echo "Error: Failed to copy '$source_file' to '$dest_file'."
44         exit 1
45     fi
46 
47     echo "$tool configuration copied to $dest_file successfully."
48 }
49 

// File: zscaler.crt Depth: 0

01 -----BEGIN CERTIFICATE-----
02 MIIE0zCCA7ugAwIBAgIJANu+mC2Jt3uTMA0GCSqGSIb3DQEBCwUAMIGhMQswCQYD
03 VQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTERMA8GA1UEBxMIU2FuIEpvc2Ux
04 FTATBgNVBAoTDFpzY2FsZXIgSW5jLjEVMBMGA1UECxMMWnNjYWxlciBJbmMuMRgw
05 FgYDVQQDEw9ac2NhbGVyIFJvb3QgQ0ExIjAgBgkqhkiG9w0BCQEWE3N1cHBvcnRA
06 enNjYWxlci5jb20wHhcNMTQxMjE5MDAyNzU1WhcNNDIwNTA2MDAyNzU1WjCBoTEL
07 MAkGA1UEBhMCVVMxEzARBgNVBAgTCkNhbGlmb3JuaWExETAPBgNVBAcTCFNhbiBK
08 b3NlMRUwEwYDVQQKEwxac2NhbGVyIEluYy4xFTATBgNVBAsTDFpzY2FsZXIgSW5j
09 LjEYMBYGA1UEAxMPWnNjYWxlciBSb290IENBMSIwIAYJKoZIhvcNAQkBFhNzdXBw
10 b3J0QHpzY2FsZXIuY29tMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA
11 qT7STSxZRTgEFFf6doHajSc1vk5jmzmM6BWuOo044EsaTc9eVEV/HjH/1DWzZtcr
12 fTj+ni205apMTlKBW3UYR+lyLHQ9FoZiDXYXK8poKSV5+Tm0Vls/5Kb8mkhVVqv7
13 LgYEmvEY7HPY+i1nEGZCa46ZXCOohJ0mBEtB9JVlpDIO+nN0hUMAYYdZ1KZWCMNf
14 5J/aTZiShsorN2A38iSOhdd+mcRM4iNL3gsLu99XhKnRqKoHeH83lVdfu1XBeoQz
15 z5V6gA3kbRvhDwoIlTBeMa5l4yRdJAfdpkbFzqiwSgNdhbxTHnYYorDzKfr2rEFM
16 dsMU0DHdeAZf711+1CunuQIDAQABo4IBCjCCAQYwHQYDVR0OBBYEFLm33UrNww4M
17 hp1d3+wcBGnFTpjfMIHWBgNVHSMEgc4wgcuAFLm33UrNww4Mhp1d3+wcBGnFTpjf
18 oYGnpIGkMIGhMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTERMA8G
19 A1UEBxMIU2FuIEpvc2UxFTATBgNVBAoTDFpzY2FsZXIgSW5jLjEVMBMGA1UECxMM
20 WnNjYWxlciBJbmMuMRgwFgYDVQQDEw9ac2NhbGVyIFJvb3QgQ0ExIjAgBgkqhkiG
21 9w0BCQEWE3N1cHBvcnRAenNjYWxlci5jb22CCQDbvpgtibd7kzAMBgNVHRMEBTAD
22 AQH/MA0GCSqGSIb3DQEBCwUAA4IBAQAw0NdJh8w3NsJu4KHuVZUrmZgIohnTm0j+
23 RTmYQ9IKA/pvxAcA6K1i/LO+Bt+tCX+C0yxqB8qzuo+4vAzoY5JEBhyhBhf1uK+P
24 /WVWFZN/+hTgpSbZgzUEnWQG2gOVd24msex+0Sr7hyr9vn6OueH+jj+vCMiAm5+u
25 kd7lLvJsBu3AO3jGWVLyPkS3i6Gf+rwAp1OsRrv3WnbkYcFf9xjuaf4z0hRCrLN2
26 xFNjavxrHmsH8jPHVvgc1VD0Opja0l/BRVauTrUaoW6tE+wFG5rEcPGS80jjHK4S
27 pB5iDj2mUZH1T8lzYtuZy0ZPirxmtsk3135+CKNa2OCAhhFjE0xd
28 -----END CERTIFICATE-----
