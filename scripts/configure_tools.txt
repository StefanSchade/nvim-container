
// File: .env Depth: 0

1 DEV_SETUP_PATH=./ 
2 CONTAINER_NAME=nvim-ocr_dev_data 
3 IMAGE_NAME=nvim-ocr_dev_data 
4 PROJECT_PATH=../ocr_dev_data 

// File: configure_tools.sh Depth: 0

01 #!/bin/bash
02 
03 source /mnt/dev-env-setup/scripts/helper/log_helper.sh && log_script_name
04 
05 # Disable mouse reporting at the start
06 echo -e "\e[?1000l"
07 
08 source ./tools/copy_config_dir.sh
09 source ./tools/copy_config_file.sh
10 
11 # Check for suppress warnings option
12 while getopts ":s" opt; do
13   case ${opt} in
14     ( s ) 
15       SUPPRESS_WARNINGS=true
16       ;;
17     ( \? ) 
18       echo "Invalid option: -$OPTARG" 1>&2
19       exit 1
20       ;;
21   esac
22 done
23 shift $((OPTIND -1))
24 
25 # Check if a configuration name is provided
26 if [ -z "$1" ]; then
27     echo "Usage: $0 <config-name>"
28     exit 1
29 fi
30 
31 CONFIG_NAME=$1
32 BASE_PATH="/mnt/dev-env-setup/configs/$CONFIG_NAME"
33 USER_HOME="/home/devuser"
34 
35 # Check if the configuration directory exists
36 if [ ! -d "$BASE_PATH" ]; then
37     echo "Error: Configuration '$CONFIG_NAME' does not exist at $BASE_PATH"
38     exit 1
39 else 
40     echo "Configuration '$CONFIG_NAME' found in folder $BASE_PATH."
41 fi
42 
43 # Iterate over each tool in the configuration directory
44 for tool in $(ls $BASE_PATH); do
45     TOOL_SCRIPT="/mnt/dev-env-setup/scripts/tools/configure_${tool}.sh"
46     if [ -f "$TOOL_SCRIPT" ]; then
47         echo "Configuring $TOOL_SCRIPT path $BASE_PATH/$tool"
48         source "$TOOL_SCRIPT" "$BASE_PATH/$tool"
49     else
50         echo "No configuration script found for tool '$tool'. Skipping."
51     fi
52 done
53 
54 # Disable mouse reporting before exiting
55 echo -e "\e[?1000l"

// File: helper\log_helper.sh Depth: 1

01 #!/bin/bash
02 
03 log_script_name() {
04     local script_name=$(basename "$0")
05     local star_line=$(printf '%*s' "${#script_name}" | tr ' ' '*')
06 
07     echo "**""${star_line}""**"
08     echo "* ""${script_name}"" *"
09     echo "**""${star_line}""**"
10 }

// File: tools\configure_nvim.sh Depth: 1

01 #!/bin/bash
02 
03 SOURCE_PATH=$1
04 USER_HOME="/home/devuser"
05 DEST_PATH="$USER_HOME/.config/nvim"
06 
07 echo "configure nvim"
08 echo $SOURCE_PATH
09 echo $USER_HOME
10 echo $DEST_PATH
11 
12 if [ "$SUPPRESS_WARNINGS" = true ]; then 
13     echo "suppress warnings=true"
14 else
15     echo "suppress warnings=false"
16 fi
17 
18 # Check if the source directory exists
19 
20 copy_config_dir "Neovim" "$SOURCE_PATH" "$DEST_PATH"
21 
22 
23 

// File: tools\configure_tmux.sh Depth: 1

01 #!/bin/bash
02 
03 USER_HOME="/home/devuser"
04 SOURCE_FILE="$1/tmux.conf"
05 DEST_FILE="$USER_HOME/.tmux.conf"
06 
07 echo "tmux config"
08 echo $USER_HOME
09 echo $SOURCE_FILE
10 echo $DEST_FILE
11 
12 if [ "$SUPPRESS_WARNINGS" = true ]; then 
13     echo "suppress warnings=true"
14 else
15     echo "suppress warnings=false"
16 fi
17 
18 
19 copy_config_file "Tmux" "$SOURCE_FILE" "$DEST_FILE"
20    

// File: tools\copy_config_dir.sh Depth: 1

01 copy_config_dir() {
02     local tool=$1
03     local source_dir=$2
04     local dest_dir=$3
05 
06     # Check if source directory exists
07     if [ ! -d "$source_dir" ]; then
08         echo "Error: Source directory '$source_dir' does not exist."
09         exit 0
10     fi
11 
12     # If the destination directory exists, ask for confirmation if SUPPRESS_WARNINGS is not set
13     if [ -d "$dest_dir" ]; then
14         if [ "$SUPPRESS_WARNINGS" = false ]; then
15             echo "Warning: This will overwrite your existing $tool configuration in $dest_dir. Are you sure? (y/n)"
16             read -p ">" choice
17             case "$choice" in 
18                 ( y|Y ) ;;
19                 ( n|N ) 
20                     echo "Operation cancelled."
21                     exit 0
22                     ;;
23                 ( * ) 
24                     echo "Invalid input. Operation cancelled."
25                     exit 1
26                     ;;
27             esac
28         fi
29 
30         # Remove the existing destination directory
31         echo "Removing existing configuration in $dest_dir"
32         rm -rf "$dest_dir"
33     fi
34 
35     # Copy the source directory to the destination
36     echo "Copying configuration for $tool from $source_dir to $dest_dir"
37     cp -r "$source_dir" "$dest_dir"
38     if [ $? -ne 0 ]; then
39         echo "Error: Failed to copy '$source_dir' to '$dest_dir'."
40         exit 1
41     fi
42 
43     echo "$tool configuration copied to $dest_dir successfully."
44 }
45 
46 # Example usage
47 # copy_config_dir "Neovim" "/path/to/source/nvim" "/path/to/destination/nvim"

// File: tools\copy_config_file.sh Depth: 1

01 # Example usage
02 # copy_config_file "Neovim" "/path/to/source/init.vim" "/path/to/destination/init.vim"
03 
04 copy_config_file() {
05     local tool=$1
06     local source_file=$2
07     local dest_file=$3
08 
09     # Check if source file exists
10     if [ ! -f "$source_file" ]; then
11         echo "Error: Source file '$source_file' does not exist."
12         exit 0
13     fi
14 
15     # Check if destination is a file (not a directory)
16     if [ -d "$dest_file" ]; then
17         echo "Error: Destination '$dest_file' is a directory, not a file."
18         exit 1
19     fi
20 
21     # If the destination file exists, ask for confirmation if SUPPRESS_WARNINGS is not set
22     if [ -f "$dest_file" ]; then
23         if [ "$SUPPRESS_WARNINGS" = false ]; then
24             echo "Warning: This will overwrite your existing $tool configuration in $dest_file. Are you sure? (y/n)"
25             read -p ">" choice
26             case "$choice" in 
27                 ( y|Y ) ;;
28                 ( n|N ) 
29                     echo "Operation cancelled."
30                     exit 0
31                     ;;
32                 ( * ) 
33                     echo "Invalid input. Operation cancelled."
34                     exit 1
35                     ;;
36             esac
37         fi
38     fi
39 
40     # Copy the source file to the destination
41     cp "$source_file" "$dest_file"
42     if [ $? -ne 0 ]; then
43         echo "Error: Failed to copy '$source_file' to '$dest_file'."
44         exit 1
45     fi
46 
47     echo "$tool configuration copied to $dest_file successfully."
48 }
49 
